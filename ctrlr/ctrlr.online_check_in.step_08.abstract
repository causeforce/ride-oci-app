<?php
/************************************************************************
 * @author	Kingsley U. Uwode II, contractor via Robert Half Technologies
 * @since	May 29 2015
 * @link	mailto:kingzmeadow@hotmail.com
 *
 * step_08:
 * Fundraising Goal (abstract file, not to be used by itself)
 *
 * Verifies/displays end-user's funds/money raised, if goal met,
 * allows the end-user to proceed with the online check-in process
 */

/**
 * ctrlr_online_check_in_action_step_08()	handles step_08 within the online check-in process
 *
 * @param	ARRAY	&$env	reference to global variable '$_app_env'
 * @param	ARRAY	&$msgs	reference to variable '$main_msgs' where any messages are stored
 * @param	ARRAY	&$out	reference to variable '$output' which contains content to be rendered
 * @param	BOOLEAN	&$CRUD	specifies if the action is being called in a CReate/Update/Delete compacity
 * @return	VOID	N/A
 */
function ctrlr_online_check_in_action_step_08(&$env,&$msgs,&$out,$CRUD=FALSE){

               
    if($CRUD===TRUE){
        if($env['flags']['is_CRUD']===TRUE){
            # CReate / Update / Delete code lines
            // Code here
        }
    }
    else if($view=_ctrlr_pro_view(__FUNCTION__)){
        # Read code lines
        $step_08['is_view_data_retrieved']=&$env['flags']['is_view_data_retrieved'];
        
        $env['request'][]=array(
            'url'=>$env['API']['URL']['TR'],
            'fields'=>array(
                'api_key'=>$env['API']['KEY'],
                'v'=>$env['API']['VER'],
                'method'=>'getRegistration',
                'fr_id'=>@$env['$_get']['fr_id'],
                $env['API']['AUTH']['FIELD']=>@$env['API']['AUTH']['TOKEN']
            )
        );
        
        $gr_idx=_ctrlr_pro_curl($env,$msgs);
        
        if(@$env['request'][$gr_idx]['response']['sxml'] instanceof SimpleXMLElement && $env['request'][$gr_idx]['response']['sxml']->getName()==='getRegistrationResponse'){
            $env['request'][]=array(
                'url'=>$env['API']['URL']['TR'],
                'fields'=>array(
                    'api_key'=>$env['API']['KEY'],
                    'v'=>$env['API']['VER'],
                    'method'=>'getFundraisingResults',
                    'fr_id'=>@$env['$_get']['fr_id'],
                    $env['API']['AUTH']['FIELD']=>@$env['API']['AUTH']['TOKEN'],
                    'cons_id'=>(string)@$env['request'][$gr_idx]['response']['sxml']->registration->consId
                )
            );
            $gfr_idx=_ctrlr_pro_curl($env,$msgs);
            if(@$env['request'][$gfr_idx]['response']['sxml'] instanceof SimpleXMLElement && $env['request'][$gfr_idx]['response']['sxml']->getName()==='getFundraisingResponse'){
                $env['request'][]=array(
                    'url'=>$env['API']['URL']['TR'],
                    'fields'=>array(
                        'api_key'=>$env['API']['KEY'],
                        'v'=>$env['API']['VER'],
                        'method'=>'getSurveyResponses',
                        'fr_id'=>@$env['$_get']['fr_id'],
                        $env['API']['AUTH']['FIELD']=>@$env['API']['AUTH']['TOKEN'],
                        'survey_id'=>$env['API']['SURVEY']['ID'],
                        ('question_'.$env['API']['SURVEY']['QUESTION'][7])=>'TRUE',
                        'requested_only'=>'TRUE'
                    )
                );
                $gsr_idx=_ctrlr_pro_curl($env,$msgs);
                if(@$env['request'][$gsr_idx]['response']['sxml'] instanceof SimpleXMLElement && $env['request'][$gsr_idx]['response']['sxml']->getName()==='getSurveyResponsesResponse'){
                    $env['request'][]=array(
                        'url'=>$env['API']['URL']['TR'],
                        'fields'=>array(
                            'api_key'=>$env['API']['KEY'],
                            'v'=>$env['API']['VER'],
                            'method'=>'getParticipationType',
                            'fr_id'=>@$env['$_get']['fr_id'],
                            $env['API']['AUTH']['FIELD']=>@$env['API']['AUTH']['TOKEN']
                        )
                    );
                    $gpt_idx=_ctrlr_pro_curl($env,$msgs);
                    if(@$env['request'][$gpt_idx]['response']['sxml'] instanceof SimpleXMLElement && $env['request'][$gpt_idx]['response']['sxml']->getName()==='getParticipationTypeResponse'){
                        //For XPath usage, all namespaces must have a prefix. Encase in a logic check so when debugging no error is thrown.
                        
                        if(!ctrlr_online_check_in_pro_xpath_register_namespace($env['request'][$gsr_idx]['response']['sxml'])) {
                            log_message(__LINE__.'fail at ctrlr_online_check_in_pro_xpath_register_namespace');
                        }
                        

                        //Get respective XML elements from the response and set local variables
                        $step_08['upsell_value']=(is_callable(array(@$env['request'][$gsr_idx]['response']['sxml'],'xpath'))?@$env['request'][$gsr_idx]['response']['sxml']->xpath('/convio:getSurveyResponsesResponse/convio:responses[convio:questionId=\''.$env['API']['SURVEY']['QUESTION'][7].'\']'):NULL);
                        // Call the Funds check function 
                        $step_08['funds_check']=ctrlr_online_check_in_pro_funds_check($env,$msgs,$env['request'][$gr_idx]['response']['sxml'],$env['request'][$gfr_idx]['response']['sxml']);
                       
                        
                        $step_08['is_crew']=(strtoupper(@$env['request'][$gpt_idx]['response']['sxml']->participationType->name) === 'CREW');
                        $step_08['is_upsell']=(strtoupper(@$step_08['upsell_value'][0]->responseValue) !== 'NO');
                        
                        // This is important!
                        $step_08['is_payment_met']=(strtoupper(@$env['request'][$gr_idx]['response']['sxml']->registration->checkinStatus) === 'COMMITTED' || strtoupper(@$env['request'][$gr_idx]['response']['sxml']->registration->checkinStatus) === 'PAID');
                        
                        $step_08['is_oci_allowed']=($step_08['is_payment_met'] || in_array('allow',$step_08['funds_check'],true));
                        $step_08['is_getting_edp']=false;
             

                        $txt_isp_button=lng($view['sxml']->text[12]);
                        $amount_required_class=' not_displayed';
                        $amount_statement_class=' color_complete';
                        $self_pledge_class=' not_displayed';
                        $dsp_btn_class='';
                        $isp_btn_class='';
                        $url_isp='';
                        $url_dsp='';
                        
                        
                        //Begin business logic
                        if($step_08['is_oci_allowed']){
                            //If an upsell option was chosen, end-user needs to have made a
                            //Delayed-Self Pledge (COMMITTED) or an Instant Self-Pledge (PAID) in order to complete the online check-in process,
                            //as it is on those pledge pages where the end-user will pay for the upsell option as well as make a pledge amount.
                            if($step_08['is_upsell'] && $step_08['is_payment_met']===FALSE){
                                $step_08['is_getting_edp']=true;
                                $txt_amount_statement=(lng($view['sxml']->text[2]).' '.lng($view['sxml']->text[3]));
                                $txt_isp_button=lng($view['sxml']->text[13]);
                                $self_pledge_class='';
                                $dsp_btn_class='not_displayed';
                            }
                            else{
                                $step_08['is_view_data_retrieved']=true;
                                $step_08['is_hiding_nav_next']=false;
                                if($step_08['is_crew']){
                                    $txt_amount_statement=str_replace(' _ENTITY_REG_','<sup>&reg;</sup>',str_replace('_EVENT_NAME_',lng($env['model']->event->name),lng($view['sxml']->text[4])));
                                }
                                else{
                                    $txt_amount_statement=(lng($view['sxml']->text[5]).' '.lcfirst(lng($view['sxml']->text[2])));
                                }
                                
                            }

                        }
                        else{
                        //    echo '111';
                            $step_08['is_getting_edp']=true;
                           // $needed_amaount = @$step_08['funds_check']['needed'];
                            $needed_amaount = @$step_08['funds_check']['individual_needed'];
                            $txt_amount_statement=(str_replace(' _ENTITY_REG_','<sup>&reg;</sup>',str_replace(array('_EVENT_NAME_','-TXT-CURRENCY-SYMBOL-',' _AMOUNT_REQUIRED_ '),array(lng($env['model']->event->name),$env['model']->currency->symbol->$env['data']['oci']['country'],$needed_amaount),lng($view['sxml']->text[6]))).($step_08['is_upsell']?(' '.lng($view['sxml']->text[7])):''));
                          
                            $amount_required_class='';
                            $amount_statement_class='';
                            $self_pledge_class='';
                        }
                        //If necessary, Get ISP and DSP links
                        if($step_08['is_getting_edp']){
                            $env['request'][]=array(
                                'url'=>$env['API']['URL']['TR'],
                                'fields'=>array(
                                    'api_key'=>$env['API']['KEY'],
                                    'v'=>$env['API']['VER'],
                                    'method'=>'getEventDataParameter',
                                    'fr_id'=>@$env['$_get']['fr_id'],
                                    $env['API']['AUTH']['FIELD']=>@$env['API']['AUTH']['TOKEN'],
                                    'edp_name'=>'F2F_OCI_ISP_FORM_ID',
                                    'edp_type'=>'string'
                                )
                            );
                            $gedp_isp_idx=_ctrlr_pro_curl($env,$msgs);
                            if(@$env['request'][$gedp_isp_idx]['response']['sxml'] instanceof SimpleXMLElement && $env['request'][$gedp_isp_idx]['response']['sxml']->getName()==='getEventDataParameterResponse'){
                                $url_isp=str_replace(
                                    array(
                                        '_SP_FORM_ID_',
                                        '_FR_ID_',
                                        '_CONS_ID_',
                                        '&DESIGNATED_ADDON_ID=_UPSELL_ID_'
                                    ),
                                    array(
                                        @$env['request'][$gedp_isp_idx]['response']['sxml']->stringValue,
                                        @$env['$_get']['fr_id'],
                                        @$env['request'][$gr_idx]['response']['sxml']->registration->consId,
                                        ($step_08['is_upsell']?('&DESIGNATED_ADDON_ID='.@$step_08['upsell_value'][0]->responseValue):'')
                                    ),
                                    $env['model']->links->url[2]
                                );
                                //To prevent crafty end-user's from using the DSP link when they are directed to the ISP link,
                                //only generate an DSP link when we are showing the DSP button otherwise just pass an empty string
                                if($dsp_btn_class===''){
                                    $env['request'][]=array(
                                        'url'=>$env['API']['URL']['TR'],
                                        'fields'=>array(
                                            'api_key'=>$env['API']['KEY'],
                                            'v'=>$env['API']['VER'],
                                            'method'=>'getEventDataParameter',
                                            'fr_id'=>@$env['$_get']['fr_id'],
                                            $env['API']['AUTH']['FIELD']=>@$env['API']['AUTH']['TOKEN'],
                                            'edp_name'=>'F2F_OCI_DSP_FORM_ID',
                                            'edp_type'=>'string'
                                        )
                                    );
                                    $gedp_dsp_idx=_ctrlr_pro_curl($env,$msgs);
                                    if(@$env['request'][$gedp_dsp_idx]['response']['sxml'] instanceof SimpleXMLElement && $env['request'][$gedp_dsp_idx]['response']['sxml']->getName()==='getEventDataParameterResponse'){
                                        $url_dsp=str_replace(
                                            array(
                                                '_SP_FORM_ID_',
                                                '_FR_ID_',
                                                '_CONS_ID_',
                                                '&DESIGNATED_ADDON_ID=_UPSELL_ID_'
                                            ),
                                            array(
                                                @$env['request'][$gedp_dsp_idx]['response']['sxml']->stringValue,
                                                @$env['$_get']['fr_id'],
                                                @$env['request'][$gr_idx]['response']['sxml']->registration->consId,
                                                ($step_08['is_upsell']?('&DESIGNATED_ADDON_ID='.@$step_08['upsell_value'][0]->responseValue):'')
                                            ),
                                            $env['model']->links->url[2]
                                        );
                                    }
                                }
                            }
                        }
                        $step_08['is_view_data_retrieved']=($step_08['is_getting_edp']===FALSE||($url_isp!==''&&($url_dsp!==''||$dsp_btn_class==='not_displayed')));
                    }
                }
            }
        }
 
        
        if($step_08['is_view_data_retrieved']===TRUE || $env['flags']['is_step_view_on_error']===TRUE){
            //Determine if hiding the NEXT button which will force the end-user to complete required action(s)
            $env['flags']['is_hiding_nav']['next']=(isset($step_08['is_hiding_nav_next'])===FALSE?true:$step_08['is_hiding_nav_next']);

            $temp_name = '';
            if(isset($_SESSION['team_name']) && $_SESSION['team_name']!='') {
                $temp_name = '<b>Team:</b> '.$_SESSION['team_name'];
            }
            # Replace text placeholders with entries from the step view, if the view is still being used
            $view['mark_up']=str_replace(
                array(
                    '-TXT-AMOUNT-RAISED-',
                    '-TXT-AMOUNT-REQUIRED-',
                    '-TXT-CURRENCY-SYMBOL-',
                    '-TXT-AMOUNT-STATEMENT-',
                    '-TXT-CHECK-MY-STATUS-',
                    '-TXT-STATUS-CHECK-NOTICE-',
                    '-TXT-SELF-PLEDGE-NOTICE-',
                    '-TXT-DELAYED-SP-',
                    '-TXT-INSTANT-SP-',
                    '_AMOUNT_NEEDED_',
                    '-DROPDOWN-LANGUGES-',
                    '-USERNAME-',
                    '-TEAMNAME-'
                ),
                array(
                    lng($view['sxml']->text[0]),
                    lng($view['sxml']->text[1]),
                    $env['model']->currency->symbol->$env['data']['oci']['country'],
                    @$txt_amount_statement,
                    lng($view['sxml']->text[8]),
                    lng($view['sxml']->text[9]),
                    lng($view['sxml']->text[10]),
                    lng($view['sxml']->text[11]),
                    @$txt_isp_button,
                    //@$step_08['funds_check']['needed'],  // by Kevin
                    @$step_08['funds_check']['updated_individual_needed'],
                    @$env['lang_select'],
                    $_SESSION['oci']['login']['user_name'],
                    $temp_name
                    
                ),
                $view['mark_up']
            );
            # Replace data placeholders with values
            $view['mark_up']=str_replace(
                array(
                    '_AMOUNT_RAISED_',
                    '_AMOUNT_REQUIRED_',
                    '_AMT_REQ_CLASS_',
                    '_AMT_STMNT_CLASS_',
                    '_SELF_PLEDGE_CLASS_',
                    '_DSP_BTN_CLASS_',
                    '_ISP_BTN_CLASS_',
                    '=URL=DELAYED=SP=',
                    '=URL=INSTANT=SP='
                ),
                array(
                   // @$step_08['funds_check']['raised'], // By Kevin
                    @$step_08['funds_check']['individual_raised'],
                    //@$step_08['funds_check']['required'],  // by Kevin
                    @$step_08['funds_check']['individual_required'],
                    @$amount_required_class,
                    @$amount_statement_class,
                    @$self_pledge_class,
                    @$dsp_btn_class,
                    @$isp_btn_class,
                    urlencode(@$url_dsp),
                    urlencode(@$url_isp)
                ),
                $view['mark_up']
            );
            //Update output to be rendered
            $out['RPL']['page_title'].=lng($view['sxml']->page_title);
            $out['RPL']['cascading_style_sheet'][]=$view['files']['css'];
            $out['RPL']['javascript'][]=$view['files']['js'];
            $out['RPL']['view']=str_replace((nl().'_STEP_VIEW_'),$view['mark_up'],$out['RPL']['view']);
        }
    }
}
?>
